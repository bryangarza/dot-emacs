#+title: .emacs.d

* Table of Contents                                                :TOC_2_gh:
 - [[#submodules][Submodules]]
 - [[#paredit][Paredit]]
 - [[#org-mode][Org mode]]
 - [[#org-present][Org-present]]
 - [[#hydras][Hydras]]
 - [[#zooming][Zooming]]
 - [[#eyebrowse][Eyebrowse]]
 - [[#unbinding][Unbinding]]
 - [[#pinning][Pinning]]
 - [[#helm][Helm]]
 - [[#aligning-code][Aligning Code]]
 - [[#editing-with-sudo][Editing with Sudo]]
 - [[#keybindings][Keybindings]]
 - [[#updating-submodules][Updating submodules]]
 - [[#finding-face-under-point][Finding face under point]]
 - [[#ad-handle-definition-warnings][Ad-handle-definition warnings]]
 - [[#ocaml][OCaml]]
 - [[#graphical-vs-console-emacs][Graphical vs Console Emacs]]
 - [[#languages][Languages]]
 - [[#input-methods][Input Methods]]
 - [[#license][License]]
 - [[#internal-notes][Internal Notes]]

* Submodules
Remember to also clone *submodules*:

#+BEGIN_SRC sh
git clone --recursive git@github.com:bryangarza/dot-emacs.git
#+END_SRC

* Paredit
- [[http://www.emacswiki.org/emacs/PareditCheatsheet][Paredit Cheatsheet]]
- [[http://mumble.net/~campbell/emacs/paredit.html][Another Paredit Cheatsheet]]

* Org mode
- [[http://orgmode.org/org.html][The Org Manual]]
- [[http://orgmode.org/guide/][The compact Org-mode Guide]]
- [[https://emacsclub.github.io/html/org_tutorial.html][Org-mode Tutorial / Cheat Sheet]]

* Org-present
- left and right for movement
- =C-c C-== for large text
- =C-c C--= for small text
- =C-c C-q= to quit (which will return you back to vanilla org-mode)
- =C-c <= to jump to first slide
- =C-c >= to jump to last slide

* Hydras
- =C-c m= Hydra for all hydras
- =C-c w= Window movement and manipulation
- =C-c c= Multiple cursors
- =C-c o= Org mode headings
- =C-c a= Avy

* Zooming
- =C-x C-+= and =C-x C--= (‘text-scale-adjust’) to increase or
  decrease the buffer text size
- =C-+= or =C--= to repeat
- =C-x C-0= to restore the default (global) face height
- =S-mouse-1= pops up a menu where you can choose these same actions

* Eyebrowse
The default key bindings are:

| Key bind    | Function                         |
|-------------+----------------------------------|
| =C-c C-w <=   | Switch to previous window config |
| =C-c C-w >=   | Switch to next window config     |
| =C-c C-w '= | Switch to last window config     |
| =C-c C-w "= | Close current window config      |
| =C-c C-w ,= | Rename current window config     |
| =C-c C-w 0=   | Switch to window config 0        |
| ...         | ...                              |
| =C-c C-w 9=   | Switch to window config 9        |

* Unbinding
This will make the symbol my-nasty-variable's value void:

#+BEGIN_SRC emacs-lisp
(makunbound 'my-nasty-variable)
#+END_SRC

This will make the symbol my-nasty-function's function definition void:

#+BEGIN_SRC emacs-lisp
(fmakunbound 'my-nasty-function)
#+END_SRC

* Pinning
If I ever want to pin packages:

#+BEGIN_SRC emacs-lisp
(setq 'package-archives '(("melpa"        . "http://melpa.org/packages/")
                          ("melpa-stable" . "http://stable.melpa.org/packages/")))

(use-package company
  :ensure t
  :pin melpa-stable)
#+END_SRC

* Helm
- [[http://emacs-helm.github.io/helm/][Helm home page]]
- [[http://tuhdo.github.io/helm-intro.html][Helm intro]]

* Aligning Code
[[https://wiki.haskell.org/Emacs/Indentation#Aligning_code][Haskell wiki: aligning code in Emacs]]

#+BEGIN_SRC emacs-lisp
(bind-key "C-x a r" 'align-regexp)
#+END_SRC

* Editing with Sudo
#+BEGIN_EXAMPLE
C-x C-f /sudo::/path/to/file
#+END_EXAMPLE

* Keybindings
Most of the keybindings I have set can be found in
~(bryan/keybindings)~. The majority involve the Super key,
which on Mac is the Command key. On Windows or GNU/Linux, this is
probably your Win key, but if it's not bound, then just bind it!

* Updating submodules
#+BEGIN_SRC sh
git submodule foreach git pull origin master
#+END_SRC

* Finding face under point
~what-cursor-position~ with a prefix argument shows the face under point, among other information.

Keyboard shortcut is =C-u C-x ==.

* Ad-handle-definition warnings
To suppress things like
#+BEGIN_EXAMPLE
ad-handle-definition: `org-latex-keyword' got redefined
#+END_EXAMPLE
Do:
#+BEGIN_SRC elisp
(setq ad-redefinition-action 'accept)
#+END_SRC
I didn't though, because they are harmless, and I'd rather know when something
is being advice'd.

* OCaml
OCaml settings require external installation, see
[[https://github.com/realworldocaml/book/wiki/Installation-Instructions][Real World OCaml's GitHub wiki]]. If you don't care about OCaml, simply comment
out =bryan/ocaml= in =bryan/pkg-full=.

* Graphical vs Console Emacs
Use Graphical Emacs.

* Languages
All these are set up:
- C
- Common Lisp
- CSS
- Clojure
- Elisp
- Elm
- Erlang
- HTML
- Haskell
- Hy
- Jade
- JavaScript
- LaTeX
- Markdown
- OCaml
- Racket
- Rust
- Scala
- Scheme
- SQL
- Stylus

* Input Methods
[[http://www.gnu.org/software/emacs/manual/html_node/emacs/Select-Input-Method.html#Select-Input-Method][22.4 Selecting an Input Method]]
- =C-x RET C-\ method RET= :: ~(set-input-method)~
- =C-\= :: ~(toggle-input-method)~
- =C-h I method RET= :: ~(describe-input-method)~
- =C-h C-\ method RET= :: also ~(describe-input-method)~
- =M-x list-input-methods= :: Display a list of all the supported input methods.
* License
Copyright (C) 2014-2016 Bryan Garza

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program.  If not, see <http://www.gnu.org/licenses/>.

* Internal Notes
Because I keep forgetting the Org mode formatting:

#+BEGIN_EXAMPLE
You can make words *bold*, /italic/, _underlined_, =verbatim= and ~code~, and,
if you must, ‘+strike-through+’. Text in the code and verbatim string is not
processed for Org mode specific syntax, it is exported verbatim.
#+END_EXAMPLE

Batch resizing images on the command line:
#+BEGIN_SRC shell
sips -Z 640 *.jpg
#+END_SRC
