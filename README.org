#+title: .emacs.d

Read about switching from Vim to Emacs in my Medium post, [[https://medium.com/@bryangarza/my-descent-into-evil-98f7017475b6][My Descent Into Evil]].

** Important!

*** Org-present

Keys are:

#+BEGIN_EXAMPLE
left/right for movement
C-c C-= for large txt
C-c C-- for small text
C-c C-q for quit (which will return you back to vanilla org-mode)
C-c < and C-c > to jump to first/last slide
#+END_EXAMPLE


*** Zooming

You can use =C-x C-+= and =C-x C--= (‘text-scale-adjust’) to increase
or decrease the buffer text size (=C-+= or =C--= to repeat). To
restore the default (global) face height, type =C-x C-0=. =S-mouse-1=
pops up a menu where you can choose these same actions.

*** Unbinding

This will make the symbol my-nasty-variable's value void:

#+BEGIN_SRC emacs-lisp
(makunbound 'my-nasty-variable)
#+END_SRC

This will make the symbol my-nasty-function's function definition void:

#+BEGIN_SRC emacs-lisp
(fmakunbound 'my-nasty-function)
#+END_SRC

** Here Be Dragons

This setup is heavily customized, [[http://www.bryangarza.me/contact.html][let me know]] if you run into any problems and
we can troubleshoot. Though official support is neither offered nor guaranteed,
I'd like this configuration to be useful to others.

** When Cloning

OCaml settings require external installation, see
[[https://github.com/realworldocaml/book/wiki/Installation-Instructions][Real World OCaml's GitHub wiki]]. If you don't care about OCaml, simply comment
out that section of the config.

*** IRC

Create a file =~/.private.el=:

#+BEGIN_SRC emacs-lisp
(setq freenode-password "YOUR_PASSWORD")
      freenode-username "YOUR_USERNAME")
#+END_SRC

You can use ~M-x circe~, though lately it has been acting strangely; sometimes
the window management is broken by circe and then only way I've been able to fix
it is by restarting Emacs. The simpler alternative is ~M-x rcirc~, though I have
not yet figured out how to get it to identify to Nickserv automatically
yet. Circe does have automatic identify working.

*** Submodules

Remember to also clone *submodules*:

#+BEGIN_SRC sh
git clone --recursive git@github.com:bryangarza/dot-emacs.git
#+END_SRC

** Graphical vs Console Emacs

This setup will work much better with *Graphical* Emacs than the terminal-based
Emacs. This is because the terminal gobbles up various key chords. Not to
mention graphical Emacs has mouse support, can display multiple font sizes, and
PDFs, and images.

See my Medium post (linked above) for Cocoa Emacs installation instructions with
=homebrew=. If you're on GNU/Linux, just install the =emacs= package, that
should come with both the graphical and terminal emacs.

In case you're curious, use ~emacs -nw~ to run in console mode. I haven't found
this config to work well with console mode though, especially because iTerm 2
takes control of the ⌘ key, as well as some other chords. Your experience may
vary.

** Languages

I've configured it for the following languages:
- HTML
- CSS
- JavaScript
- Markdown
- Elisp
- Clojure
- Haskell
- OCaml
- C
- Jade
- Stylus
- Scheme
- Racket
- Scala
- Hy
- LaTeX

Other languages may work out-of-the-box, for example I have not changed any
settings for Python but the default editing experience is decent as-is.

** Packages and Modes

Notable packages and modes that I use include

- Evil
- Paredit
- Helm, Helm Swoop
- Flycheck
- Multiple Cursors
- Ace Jump

** License

Copyright (C) 2015 Bryan Garza

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program.  If not, see <http://www.gnu.org/licenses/>.

** Internal Notes

Because I keep forgetting the Org mode formatting:

#+BEGIN_EXAMPLE
You can make words *bold*, /italic/, _underlined_, =verbatim= and ~code~, and,
if you must, ‘+strike-through+’. Text in the code and verbatim string is not
processed for Org mode specific syntax, it is exported verbatim.
#+END_EXAMPLE
